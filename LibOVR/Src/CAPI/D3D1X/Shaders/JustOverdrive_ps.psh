/************************************************************************************

Filename    :   DistortionChroma_ps.psh

Copyright   :   Copyright 2014 Oculus VR, LLC All Rights reserved.

Licensed under the Oculus VR Rift SDK License Version 3.2 (the "License"); 
you may not use the Oculus VR Rift SDK except in compliance with the License, 
which is provided at the time of installation or download, or which 
otherwise accompanies this software in either electronic or hard copy form.

You may obtain a copy of the License at

http://www.oculusvr.com/licenses/LICENSE-3.2 

Unless required by applicable law or agreed to in writing, the Oculus VR SDK 
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

************************************************************************************/

// For overdrive
Texture2D CurrentTexture : register(t0);    // The frame we have just rendered
//SamplerState LastSampler : register(s0);  // not needed, we use a Load()
Texture2D LastTexture : register(t1);       // The previously rendered frame
//SamplerState LastSampler : register(s1);  // not needed, we use a Load()
Texture2D OverdriveLut : register(t2);
SamplerState OverdriveSampler : register(s2);

float3 OverdriveScales;


void   main(in float4 oPosition  : SV_Position,
			out float4 outColor0 : SV_Target0)
{
	float3 newColor = CurrentTexture.Load(int3(oPosition.xy, 0)).rgb;
	float3 oldColor = LastTexture.Load(int3(oPosition.xy, 0)).rgb;
	    	
    // The code in DistortionChroma_generic_ps.psh and JustOverdrive_ps.psh REALLY needs to match!

    float3 overdriveColor;

    // x < 1.5 means "use analytical model instead of LUT"
    if(OverdriveScales.x < 1.5)
    {
		float3 adjustedScales;
		adjustedScales.x = newColor.x > oldColor.x ? OverdriveScales.y : OverdriveScales.z;
    	adjustedScales.y = newColor.y > oldColor.y ? OverdriveScales.y : OverdriveScales.z;
		adjustedScales.z = newColor.z > oldColor.z ? OverdriveScales.y : OverdriveScales.z;
		overdriveColor = saturate(newColor + (newColor - oldColor) * adjustedScales);
    }
	else
    {
        overdriveColor.r = OverdriveLut.Sample(OverdriveSampler, float2(newColor.r, oldColor.r)).r;
		overdriveColor.g = OverdriveLut.Sample(OverdriveSampler, float2(newColor.g, oldColor.g)).g;
		overdriveColor.b = OverdriveLut.Sample(OverdriveSampler, float2(newColor.b, oldColor.b)).b;
    }

	outColor0 = float4(overdriveColor, 0.0);
}
