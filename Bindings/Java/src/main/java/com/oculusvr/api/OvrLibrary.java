package com.oculusvr.api;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.FloatByReference;
/**
 * JNA Wrapper for library <b>OVR_CAPI</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface OvrLibrary extends Library {
  public static final String JNA_LIBRARY_NAME = "OVR_C";
  public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(OvrLibrary.JNA_LIBRARY_NAME);
  public static final OvrLibrary INSTANCE = (OvrLibrary)Native.loadLibrary(OvrLibrary.JNA_LIBRARY_NAME, OvrLibrary.class);
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrHmdType {
    /** <i>native declaration : OVR_CAPI.h:86</i> */
    public static final int ovrHmd_None = 0;
    /** <i>native declaration : OVR_CAPI.h:87</i> */
    public static final int ovrHmd_DK1 = 3;
    /** <i>native declaration : OVR_CAPI.h:88</i> */
    public static final int ovrHmd_DKHD = 4;
    /** <i>native declaration : OVR_CAPI.h:89</i> */
    public static final int ovrHmd_CrystalCoveProto = 5;
    /** <i>native declaration : OVR_CAPI.h:90</i> */
    public static final int ovrHmd_DK2 = 6;
    /**
     * Some HMD other then the one in the enumeration.<br>
     * <i>native declaration : OVR_CAPI.h:91</i>
     */
    public static final int ovrHmd_Other = 7;
  };
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrHmdCapBits {
    /**
     * This HMD exists (as opposed to being unplugged).<br>
     * <i>native declaration : OVR_CAPI.h:97</i>
     */
    public static final int ovrHmdCap_Present = 0x0001;
    /**
     * HMD and is sensor is available for use<br>
     * <i>native declaration : OVR_CAPI.h:98</i>
     */
    public static final int ovrHmdCap_Available = 0x0002;
    /**
     * (if not owned by another app).<br>
     * Support orientation tracking (IMU).<br>
     * <i>native declaration : OVR_CAPI.h:100</i>
     */
    public static final int ovrHmdCap_Orientation = 0x0010;
    /**
     * Supports yaw correction through magnetometer or other means.<br>
     * <i>native declaration : OVR_CAPI.h:101</i>
     */
    public static final int ovrHmdCap_YawCorrection = 0x0020;
    /**
     * Supports positional tracking.<br>
     * <i>native declaration : OVR_CAPI.h:102</i>
     */
    public static final int ovrHmdCap_Position = 0x0040;
    /**
     * Supports low persistence mode.<br>
     * <i>native declaration : OVR_CAPI.h:103</i>
     */
    public static final int ovrHmdCap_LowPersistence = 0x0080;
    /**
     * Supports pixel reading for continous latency testing.<br>
     * <i>native declaration : OVR_CAPI.h:104</i>
     */
    public static final int ovrHmdCap_LatencyTest = 0x0100;
    /**
     * Adjust prediction dynamically based on DK2 Latency.<br>
     * <i>native declaration : OVR_CAPI.h:105</i>
     */
    public static final int ovrHmdCap_DynamicPrediction = 0x0200;
    /**
     * Support rendering without VSync for debugging<br>
     * <i>native declaration : OVR_CAPI.h:108</i>
     */
    public static final int ovrHmdCap_NoVSync = 0x1000;
  };
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrDistortionCaps {
    /** <i>native declaration : OVR_CAPI.h:115</i> */
    public static final int ovrDistortion_Chromatic = 0x01;
    /** <i>native declaration : OVR_CAPI.h:116</i> */
    public static final int ovrDistortion_TimeWarp = 0x02;
    /** <i>native declaration : OVR_CAPI.h:117</i> */
    public static final int ovrDistortion_Vignette = 0x08;
  };
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrEyeType {
    /** <i>native declaration : OVR_CAPI.h:126</i> */
    public static final int ovrEye_Left = 0;
    /** <i>native declaration : OVR_CAPI.h:127</i> */
    public static final int ovrEye_Right = 1;
    /** <i>native declaration : OVR_CAPI.h:128</i> */
    public static final int ovrEye_Count = 2;
  };
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrStatusBits {
    /**
     * Orientation is currently tracked (connected and in use).<br>
     * <i>native declaration : OVR_CAPI.h:188</i>
     */
    public static final int ovrStatus_OrientationTracked = 0x0001;
    /**
     * Position is currently tracked (FALSE if out of range).<br>
     * <i>native declaration : OVR_CAPI.h:189</i>
     */
    public static final int ovrStatus_PositionTracked = 0x0002;
    /**
     * Position tracking HW is connected.<br>
     * <i>native declaration : OVR_CAPI.h:190</i>
     */
    public static final int ovrStatus_PositionConnected = 0x0020;
    /**
     * HMD Display is available & connected.<br>
     * <i>native declaration : OVR_CAPI.h:191</i>
     */
    public static final int ovrStatus_HmdConnected = 0x0080;
  };
  /**
   * <i>native declaration : OVR_CAPI.h</i><br>
   * enum values
   */
  public static interface ovrRenderAPIType {
    /** <i>native declaration : OVR_CAPI.h:298</i> */
    public static final int ovrRenderAPI_None = 0;
    /** <i>native declaration : OVR_CAPI.h:299</i> */
    public static final int ovrRenderAPI_OpenGL = 1;
    /** <i>native declaration : OVR_CAPI.h:300</i> */
    public static final int ovrRenderAPI_Android_GLES = 2;
    /** <i>native declaration : OVR_CAPI.h:301</i> */
    public static final int ovrRenderAPI_D3D9 = 3;
    /** <i>native declaration : OVR_CAPI.h:302</i> */
    public static final int ovrRenderAPI_D3D10 = 4;
    /** <i>native declaration : OVR_CAPI.h:303</i> */
    public static final int ovrRenderAPI_D3D11 = 5;
    /** <i>native declaration : OVR_CAPI.h:304</i> */
    public static final int ovrRenderAPI_Count = 6;
  };
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final float OVR_DEFAULT_IPD = 0.064f;
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_DEFAULT_GENDER = "Male";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_NECK_TO_EYE_HORIZONTAL = "NeckEyeHori";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final float OVR_DEFAULT_EYE_HEIGHT = 1.675f;
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_USER = "User";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final float OVR_DEFAULT_PLAYER_HEIGHT = 1.778f;
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_PLAYER_HEIGHT = "PlayerHeight";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_NECK_TO_EYE_VERTICAL = "NeckEyeVert";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_GENDER = "Gender";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_IPD = "IPD";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final float OVR_DEFAULT_NECK_TO_EYE_VERTICAL = 0.12f;
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final float OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL = 0.12f;
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_EYE_HEIGHT = "EyeHeight";
  /** <i>native declaration : OVR_CAPI.h</i> */
  public static final String OVR_KEY_NAME = "Name";
  /**
   * No other functions calls are allowed before ovr_Initialize succeeds or after ovr_Shutdown.<br>
   * Original signature : <code>ovrBool ovr_Initialize()</code><br>
   * <i>native declaration : OVR_CAPI.h:372</i>
   */
  byte ovr_Initialize();
  /**
   * Original signature : <code>void ovr_Shutdown()</code><br>
   * <i>native declaration : OVR_CAPI.h:373</i>
   */
  void ovr_Shutdown();
  /**
   * Users can get information about each HMD by calling ovrHmd_Create with an index.<br>
   * Original signature : <code>int ovrHmd_Detect()</code><br>
   * <i>native declaration : OVR_CAPI.h:378</i>
   */
  int ovrHmd_Detect();
  /**
   * If not null, returned handle must be freed with ovrHmd_Destroy.<br>
   * Original signature : <code>ovrHmd ovrHmd_Create(int)</code><br>
   * <i>native declaration : OVR_CAPI.h:384</i>
   */
  OvrLibrary.ovrHmd ovrHmd_Create(int index);
  /**
   * Original signature : <code>void ovrHmd_Destroy(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:385</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_Destroy(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_Destroy(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  void ovrHmd_Destroy(Pointer hmd);
  /**
   * Original signature : <code>void ovrHmd_Destroy(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:385</i>
   */
  void ovrHmd_Destroy(OvrLibrary.ovrHmd hmd);
  /**
   * but may be used to debug some of the related rendering.<br>
   * Original signature : <code>ovrHmd ovrHmd_CreateDebug(ovrHmdType)</code><br>
   * <i>native declaration : OVR_CAPI.h:389</i>
   */
  OvrLibrary.ovrHmd ovrHmd_CreateDebug(int type);
  /**
   * Pass null hmd to get global error (for create, etc).<br>
   * Original signature : <code>char* ovrHmd_GetLastError(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:395</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetLastError(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_GetLastError(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  String ovrHmd_GetLastError(Pointer hmd);
  /**
   * Pass null hmd to get global error (for create, etc).<br>
   * Original signature : <code>char* ovrHmd_GetLastError(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:395</i>
   */
  String ovrHmd_GetLastError(OvrLibrary.ovrHmd hmd);
  /**
   * are not available, the function will fail. Pass 0 if only specifying SupportedCaps.<br>
   * Original signature : <code>ovrBool ovrHmd_StartSensor(ovrHmd, unsigned int, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:411</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_StartSensor(com.oculusvr.api.OvrLibrary.ovrHmd, int, int)} and {@link #ovrHmd_StartSensor(com.sun.jna.Pointer, int, int)} instead
   */
  @Deprecated 
  byte ovrHmd_StartSensor(Pointer hmd, int supportedCaps, int requiredCaps);
  /**
   * are not available, the function will fail. Pass 0 if only specifying SupportedCaps.<br>
   * Original signature : <code>ovrBool ovrHmd_StartSensor(ovrHmd, unsigned int, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:411</i>
   */
  byte ovrHmd_StartSensor(OvrLibrary.ovrHmd hmd, int supportedCaps, int requiredCaps);
  /**
   * Stops sensor sampling, shutting down internal resources.<br>
   * Original signature : <code>void ovrHmd_StopSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:414</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_StopSensor(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_StopSensor(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  void ovrHmd_StopSensor(Pointer hmd);
  /**
   * Stops sensor sampling, shutting down internal resources.<br>
   * Original signature : <code>void ovrHmd_StopSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:414</i>
   */
  void ovrHmd_StopSensor(OvrLibrary.ovrHmd hmd);
  /**
   * Resets sensor orientation.<br>
   * Original signature : <code>void ovrHmd_ResetSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:416</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_ResetSensor(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_ResetSensor(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  void ovrHmd_ResetSensor(Pointer hmd);
  /**
   * Resets sensor orientation.<br>
   * Original signature : <code>void ovrHmd_ResetSensor(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:416</i>
   */
  void ovrHmd_ResetSensor(OvrLibrary.ovrHmd hmd);
  /**
   * This may also be used for more refined timing of FrontBuffer rendering logic, etc.<br>
   * Original signature : <code>ovrSensorState ovrHmd_GetSensorState(ovrHmd, double)</code><br>
   * <i>native declaration : OVR_CAPI.h:423</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetSensorState(com.oculusvr.api.OvrLibrary.ovrHmd, double)} and {@link #ovrHmd_GetSensorState(com.sun.jna.Pointer, double)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrSensorState_.ByValue ovrHmd_GetSensorState(Pointer hmd, double absTime);
  /**
   * This may also be used for more refined timing of FrontBuffer rendering logic, etc.<br>
   * Original signature : <code>ovrSensorState ovrHmd_GetSensorState(ovrHmd, double)</code><br>
   * <i>native declaration : OVR_CAPI.h:423</i>
   */
  com.oculusvr.api.ovrSensorState_.ByValue ovrHmd_GetSensorState(OvrLibrary.ovrHmd hmd, double absTime);
  /**
   * Only valid after StartSensor.<br>
   * Original signature : <code>ovrBool ovrHmd_GetSensorDesc(ovrHmd, ovrSensorDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:427</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetSensorDesc(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrSensorDesc_)} and {@link #ovrHmd_GetSensorDesc(com.sun.jna.Pointer, com.oculusvr.api.ovrSensorDesc_)} instead
   */
  @Deprecated 
  byte ovrHmd_GetSensorDesc(Pointer hmd, ovrSensorDesc_ descOut);
  /**
   * Only valid after StartSensor.<br>
   * Original signature : <code>ovrBool ovrHmd_GetSensorDesc(ovrHmd, ovrSensorDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:427</i>
   */
  byte ovrHmd_GetSensorDesc(OvrLibrary.ovrHmd hmd, ovrSensorDesc_ descOut);
  /**
   * Fills in description about HMD; this is the same as filled in by ovrHmd_Create.<br>
   * Original signature : <code>void ovrHmd_GetDesc(ovrHmd, ovrHmdDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:434</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetDesc(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrHmdDesc_)} and {@link #ovrHmd_GetDesc(com.sun.jna.Pointer, com.oculusvr.api.ovrHmdDesc_)} instead
   */
  @Deprecated 
  void ovrHmd_GetDesc(Pointer hmd, ovrHmdDesc_ desc);
  /**
   * Fills in description about HMD; this is the same as filled in by ovrHmd_Create.<br>
   * Original signature : <code>void ovrHmd_GetDesc(ovrHmd, ovrHmdDesc*)</code><br>
   * <i>native declaration : OVR_CAPI.h:434</i>
   */
  void ovrHmd_GetDesc(OvrLibrary.ovrHmd hmd, ovrHmdDesc_ desc);
  /**
   * can improve performance.<br>
   * Original signature : <code>ovrSizei ovrHmd_GetFovTextureSize(ovrHmd, ovrEyeType, ovrFovPort, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:441</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetFovTextureSize(com.oculusvr.api.OvrLibrary.ovrHmd, int, com.oculusvr.api.ovrFovPort_.ByValue, float)} and {@link #ovrHmd_GetFovTextureSize(com.sun.jna.Pointer, int, com.oculusvr.api.ovrFovPort_.ByValue, float)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrSizei_.ByValue ovrHmd_GetFovTextureSize(Pointer hmd, int eye, com.oculusvr.api.ovrFovPort_.ByValue fov, float pixelsPerDisplayPixel);
  /**
   * can improve performance.<br>
   * Original signature : <code>ovrSizei ovrHmd_GetFovTextureSize(ovrHmd, ovrEyeType, ovrFovPort, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:441</i>
   */
  com.oculusvr.api.ovrSizei_.ByValue ovrHmd_GetFovTextureSize(OvrLibrary.ovrHmd hmd, int eye, com.oculusvr.api.ovrFovPort_.ByValue fov, float pixelsPerDisplayPixel);
  /**
   * Original signature : <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, unsigned int, const ovrEyeDesc[2], ovrEyeRenderDesc[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:483</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_ConfigureRendering(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrRenderAPIConfig_, int, int, com.oculusvr.api.ovrEyeDesc_[], com.oculusvr.api.ovrEyeRenderDesc_[])} and {@link #ovrHmd_ConfigureRendering(com.sun.jna.Pointer, com.oculusvr.api.ovrRenderAPIConfig_, int, int, com.oculusvr.api.ovrEyeDesc_[], com.oculusvr.api.ovrEyeRenderDesc_[])} instead
   */
  @Deprecated 
  byte ovrHmd_ConfigureRendering(Pointer hmd, ovrRenderAPIConfig_ apiConfig, int hmdCaps, int distortionCaps, Pointer eyeDescIn, Pointer eyeRenderDescOut);
  /**
   * Original signature : <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, unsigned int, const ovrEyeDesc[2], ovrEyeRenderDesc[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:483</i>
   */
  byte ovrHmd_ConfigureRendering(OvrLibrary.ovrHmd hmd, ovrRenderAPIConfig_ apiConfig, int hmdCaps, int distortionCaps, ovrEyeDesc_ eyeDescIn[], ovrEyeRenderDesc_ eyeRenderDescOut[]);
  /**
   * Original signature : <code>ovrBool ovrHmd_ConfigureRendering(ovrHmd, const ovrRenderAPIConfig*, unsigned int, unsigned int, const ovrEyeDesc[2], ovrEyeRenderDesc[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:483</i>
   */
  byte ovrHmd_ConfigureRendering(Pointer hmd, ovrRenderAPIConfig_ apiConfig, int hmdCaps, int distortionCaps, ovrEyeDesc_ eyeDescIn[], ovrEyeRenderDesc_ eyeRenderDescOut[]);
  /**
   * Pass 0 for frame index if not using GetFrameTiming.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrame(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:495</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_BeginFrame(com.oculusvr.api.OvrLibrary.ovrHmd, int)} and {@link #ovrHmd_BeginFrame(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_BeginFrame(Pointer hmd, int frameIndex);
  /**
   * Pass 0 for frame index if not using GetFrameTiming.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrame(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:495</i>
   */
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_BeginFrame(OvrLibrary.ovrHmd hmd, int frameIndex);
  /**
   * *** This Function will to Present/SwapBuffers and potentially wait for GPU Sync ***.<br>
   * Original signature : <code>void ovrHmd_EndFrame(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:501</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_EndFrame(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_EndFrame(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  void ovrHmd_EndFrame(Pointer hmd);
  /**
   * *** This Function will to Present/SwapBuffers and potentially wait for GPU Sync ***.<br>
   * Original signature : <code>void ovrHmd_EndFrame(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:501</i>
   */
  void ovrHmd_EndFrame(OvrLibrary.ovrHmd hmd);
  /**
   * HmdDesc.EyeRenderOrder[0] first.<br>
   * Original signature : <code>ovrPosef ovrHmd_BeginEyeRender(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:511</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_BeginEyeRender(com.oculusvr.api.OvrLibrary.ovrHmd, int)} and {@link #ovrHmd_BeginEyeRender(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrPosef_.ByValue ovrHmd_BeginEyeRender(Pointer hmd, int eye);
  /**
   * HmdDesc.EyeRenderOrder[0] first.<br>
   * Original signature : <code>ovrPosef ovrHmd_BeginEyeRender(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:511</i>
   */
  com.oculusvr.api.ovrPosef_.ByValue ovrHmd_BeginEyeRender(OvrLibrary.ovrHmd hmd, int eye);
  /**
   * be different if different pose was used for rendering.<br>
   * Original signature : <code>void ovrHmd_EndEyeRender(ovrHmd, ovrEyeType, ovrPosef, ovrTexture*)</code><br>
   * <i>native declaration : OVR_CAPI.h:519</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_EndEyeRender(com.oculusvr.api.OvrLibrary.ovrHmd, int, com.oculusvr.api.ovrPosef_.ByValue, com.oculusvr.api.ovrTexture_)} and {@link #ovrHmd_EndEyeRender(com.sun.jna.Pointer, int, com.oculusvr.api.ovrPosef_.ByValue, com.oculusvr.api.ovrTexture_)} instead
   */
  @Deprecated 
  void ovrHmd_EndEyeRender(Pointer hmd, int eye, com.oculusvr.api.ovrPosef_.ByValue renderPose, ovrTexture_ eyeTexture);
  /**
   * be different if different pose was used for rendering.<br>
   * Original signature : <code>void ovrHmd_EndEyeRender(ovrHmd, ovrEyeType, ovrPosef, ovrTexture*)</code><br>
   * <i>native declaration : OVR_CAPI.h:519</i>
   */
  void ovrHmd_EndEyeRender(OvrLibrary.ovrHmd hmd, int eye, com.oculusvr.api.ovrPosef_.ByValue renderPose, ovrTexture_ eyeTexture);
  /**
   * the game side.<br>
   * Original signature : <code>ovrEyeRenderDesc ovrHmd_GetRenderDesc(ovrHmd, ovrEyeDesc)</code><br>
   * <i>native declaration : OVR_CAPI.h:546</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetRenderDesc(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrEyeDesc_.ByValue)} and {@link #ovrHmd_GetRenderDesc(com.sun.jna.Pointer, com.oculusvr.api.ovrEyeDesc_.ByValue)} instead
   */
  @Deprecated 
  ovrEyeRenderDesc_.ByValue ovrHmd_GetRenderDesc(Pointer hmd, ovrEyeDesc_.ByValue eyeDesc);
  /**
   * the game side.<br>
   * Original signature : <code>ovrEyeRenderDesc ovrHmd_GetRenderDesc(ovrHmd, ovrEyeDesc)</code><br>
   * <i>native declaration : OVR_CAPI.h:546</i>
   */
  ovrEyeRenderDesc_.ByValue ovrHmd_GetRenderDesc(OvrLibrary.ovrHmd hmd, ovrEyeDesc_.ByValue eyeDesc);
  /**
   * ovrDistortionMesh values will be set to null.<br>
   * Original signature : <code>ovrBool ovrHmd_CreateDistortionMesh(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2], ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:581</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_CreateDistortionMesh(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrEyeDesc_.ByValue, int, com.oculusvr.api.ovrVector2f_[], com.oculusvr.api.ovrDistortionMesh_)} and {@link #ovrHmd_CreateDistortionMesh(com.sun.jna.Pointer, com.oculusvr.api.ovrEyeDesc_.ByValue, int, com.oculusvr.api.ovrVector2f_[], com.oculusvr.api.ovrDistortionMesh_)} instead
   */
  @Deprecated 
  byte ovrHmd_CreateDistortionMesh(Pointer hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, Pointer uvScaleOffsetOut, ovrDistortionMesh_ meshData);
  /**
   * ovrDistortionMesh values will be set to null.<br>
   * Original signature : <code>ovrBool ovrHmd_CreateDistortionMesh(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2], ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:581</i>
   */
  byte ovrHmd_CreateDistortionMesh(OvrLibrary.ovrHmd hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, ovrVector2f_ uvScaleOffsetOut[], ovrDistortionMesh_ meshData);
  /**
   * ovrDistortionMesh values will be set to null.<br>
   * Original signature : <code>ovrBool ovrHmd_CreateDistortionMesh(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2], ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:581</i>
   */
  byte ovrHmd_CreateDistortionMesh(Pointer hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, ovrVector2f_ uvScaleOffsetOut[], ovrDistortionMesh_ meshData);
  /**
   * are set to null and zeroes after the call.<br>
   * Original signature : <code>void ovrHmd_DestroyDistortionMesh(ovrDistortionMesh*)</code><br>
   * <i>native declaration : OVR_CAPI.h:588</i>
   */
  void ovrHmd_DestroyDistortionMesh(ovrDistortionMesh_ meshData);
  /**
   * viewport changes after the fact. This can be used to adjust render size every frame, if desired.<br>
   * Original signature : <code>void ovrHmd_GetRenderScaleAndOffset(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:592</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetRenderScaleAndOffset(com.oculusvr.api.OvrLibrary.ovrHmd, com.oculusvr.api.ovrEyeDesc_.ByValue, int, com.oculusvr.api.ovrVector2f_[])} and {@link #ovrHmd_GetRenderScaleAndOffset(com.sun.jna.Pointer, com.oculusvr.api.ovrEyeDesc_.ByValue, int, com.oculusvr.api.ovrVector2f_[])} instead
   */
  @Deprecated 
  void ovrHmd_GetRenderScaleAndOffset(Pointer hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, Pointer uvScaleOffsetOut);
  /**
   * viewport changes after the fact. This can be used to adjust render size every frame, if desired.<br>
   * Original signature : <code>void ovrHmd_GetRenderScaleAndOffset(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:592</i>
   */
  void ovrHmd_GetRenderScaleAndOffset(OvrLibrary.ovrHmd hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, ovrVector2f_ uvScaleOffsetOut[]);
  /**
   * viewport changes after the fact. This can be used to adjust render size every frame, if desired.<br>
   * Original signature : <code>void ovrHmd_GetRenderScaleAndOffset(ovrHmd, ovrEyeDesc, unsigned int, ovrVector2f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:592</i>
   */
  void ovrHmd_GetRenderScaleAndOffset(Pointer hmd, ovrEyeDesc_.ByValue eyeDesc, int distortionCaps, ovrVector2f_ uvScaleOffsetOut[]);
  /**
   * with every frame and pass the index to RenderThread for processing.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_GetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:599</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetFrameTiming(com.oculusvr.api.OvrLibrary.ovrHmd, int)} and {@link #ovrHmd_GetFrameTiming(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_GetFrameTiming(Pointer hmd, int frameIndex);
  /**
   * with every frame and pass the index to RenderThread for processing.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_GetFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:599</i>
   */
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_GetFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex);
  /**
   * pass the same frame index as was used for GetFrameTiming on the main thread.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:604</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_BeginFrameTiming(com.oculusvr.api.OvrLibrary.ovrHmd, int)} and {@link #ovrHmd_BeginFrameTiming(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_BeginFrameTiming(Pointer hmd, int frameIndex);
  /**
   * pass the same frame index as was used for GetFrameTiming on the main thread.<br>
   * Original signature : <code>ovrFrameTiming ovrHmd_BeginFrameTiming(ovrHmd, unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:604</i>
   */
  com.oculusvr.api.ovrFrameTiming_.ByValue ovrHmd_BeginFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex);
  /**
   * before this call to reduce latency and ensure proper timing.<br>
   * Original signature : <code>void ovrHmd_EndFrameTiming(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:609</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_EndFrameTiming(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_EndFrameTiming(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  void ovrHmd_EndFrameTiming(Pointer hmd);
  /**
   * before this call to reduce latency and ensure proper timing.<br>
   * Original signature : <code>void ovrHmd_EndFrameTiming(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:609</i>
   */
  void ovrHmd_EndFrameTiming(OvrLibrary.ovrHmd hmd);
  /**
   * isn't called. Resets internal frame index to the specified number.<br>
   * Original signature : <code>void ovrHmd_ResetFrameTiming(ovrHmd, unsigned int, bool)</code><br>
   * <i>native declaration : OVR_CAPI.h:614</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_ResetFrameTiming(com.oculusvr.api.OvrLibrary.ovrHmd, int, byte)} and {@link #ovrHmd_ResetFrameTiming(com.sun.jna.Pointer, int, byte)} instead
   */
  @Deprecated 
  void ovrHmd_ResetFrameTiming(Pointer hmd, int frameIndex, byte vsync);
  /**
   * isn't called. Resets internal frame index to the specified number.<br>
   * Original signature : <code>void ovrHmd_ResetFrameTiming(ovrHmd, unsigned int, bool)</code><br>
   * <i>native declaration : OVR_CAPI.h:614</i>
   */
  void ovrHmd_ResetFrameTiming(OvrLibrary.ovrHmd hmd, int frameIndex, byte vsync);
  /**
   * Must be called between ovrHmd_BeginFrameTiming & ovrHmd_EndFrameTiming.<br>
   * Original signature : <code>ovrPosef ovrHmd_GetEyePose(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:619</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetEyePose(com.oculusvr.api.OvrLibrary.ovrHmd, int)} and {@link #ovrHmd_GetEyePose(com.sun.jna.Pointer, int)} instead
   */
  @Deprecated 
  com.oculusvr.api.ovrPosef_.ByValue ovrHmd_GetEyePose(Pointer hmd, int eye);
  /**
   * Must be called between ovrHmd_BeginFrameTiming & ovrHmd_EndFrameTiming.<br>
   * Original signature : <code>ovrPosef ovrHmd_GetEyePose(ovrHmd, ovrEyeType)</code><br>
   * <i>native declaration : OVR_CAPI.h:619</i>
   */
  com.oculusvr.api.ovrPosef_.ByValue ovrHmd_GetEyePose(OvrLibrary.ovrHmd hmd, int eye);
  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:626</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetEyeTimewarpMatrices(com.oculusvr.api.OvrLibrary.ovrHmd, int, com.oculusvr.api.ovrPosef_.ByValue, com.oculusvr.api.ovrMatrix4f_[])} and {@link #ovrHmd_GetEyeTimewarpMatrices(com.sun.jna.Pointer, int, com.oculusvr.api.ovrPosef_.ByValue, com.oculusvr.api.ovrMatrix4f_[])} instead
   */
  @Deprecated 
  void ovrHmd_GetEyeTimewarpMatrices(Pointer hmd, int eye, com.oculusvr.api.ovrPosef_.ByValue renderPose, Pointer twmOut);
  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:626</i>
   */
  void ovrHmd_GetEyeTimewarpMatrices(OvrLibrary.ovrHmd hmd, int eye, com.oculusvr.api.ovrPosef_.ByValue renderPose, ovrMatrix4f_ twmOut[]);
  /**
   * Must be called on the same thread as ovrHmd_BeginFrameTiming.<br>
   * Original signature : <code>void ovrHmd_GetEyeTimewarpMatrices(ovrHmd, ovrEyeType, ovrPosef, ovrMatrix4f[2])</code><br>
   * <i>native declaration : OVR_CAPI.h:626</i>
   */
  void ovrHmd_GetEyeTimewarpMatrices(Pointer hmd, int eye, com.oculusvr.api.ovrPosef_.ByValue renderPose, ovrMatrix4f_ twmOut[]);
  /**
   * Used to generate projection from ovrEyeDesc::Fov.<br>
   * Original signature : <code>ovrMatrix4f ovrMatrix4f_Projection(ovrFovPort, float, float, ovrBool)</code><br>
   * <i>native declaration : OVR_CAPI.h:635</i>
   */
  ovrMatrix4f_.ByValue ovrMatrix4f_Projection(com.oculusvr.api.ovrFovPort_.ByValue fov, float znear, float zfar, byte rightHanded);
  /**
   * orthoDistance = distance from camera, such as 0.8m<br>
   * Original signature : <code>ovrMatrix4f ovrMatrix4f_OrthoSubProjection(ovrMatrix4f, ovrVector2f, float, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:641</i>
   */
  ovrMatrix4f_.ByValue ovrMatrix4f_OrthoSubProjection(ovrMatrix4f_.ByValue projection, ovrVector2f_.ByValue orthoScale, float orthoDistance, float eyeViewAdjustX);
  /**
   * value as used in sensor messages.<br>
   * Original signature : <code>double ovr_GetTimeInSeconds()</code><br>
   * <i>native declaration : OVR_CAPI.h:646</i>
   */
  double ovr_GetTimeInSeconds();
  /**
   * Waits until the specified absolute time.<br>
   * Original signature : <code>double ovr_WaitTillTime(double)</code><br>
   * <i>native declaration : OVR_CAPI.h:649</i>
   */
  double ovr_WaitTillTime(double absTime);
  /**
   * be used to clear the screen.<br>
   * Original signature : <code>ovrBool ovrHmd_ProcessLatencyTest(ovrHmd, unsigned char[3])</code><br>
   * <i>native declaration : OVR_CAPI.h:658</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_ProcessLatencyTest(com.oculusvr.api.OvrLibrary.ovrHmd, java.nio.ByteBuffer)} and {@link #ovrHmd_ProcessLatencyTest(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  byte ovrHmd_ProcessLatencyTest(Pointer hmd, Pointer rgbColorOut);
  /**
   * be used to clear the screen.<br>
   * Original signature : <code>ovrBool ovrHmd_ProcessLatencyTest(ovrHmd, unsigned char[3])</code><br>
   * <i>native declaration : OVR_CAPI.h:658</i>
   */
  byte ovrHmd_ProcessLatencyTest(OvrLibrary.ovrHmd hmd, ByteBuffer rgbColorOut);
  /**
   * Buffer is valid until next call.<br>
   * Original signature : <code>char* ovrHmd_GetLatencyTestResult(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:662</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetLatencyTestResult(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_GetLatencyTestResult(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  String ovrHmd_GetLatencyTestResult(Pointer hmd);
  /**
   * Buffer is valid until next call.<br>
   * Original signature : <code>char* ovrHmd_GetLatencyTestResult(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:662</i>
   */
  String ovrHmd_GetLatencyTestResult(OvrLibrary.ovrHmd hmd);
  /**
   * pixel-read back method (-1 for invalid or N/A)<br>
   * Original signature : <code>double ovrHmd_GetMeasuredLatencyTest2(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:666</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetMeasuredLatencyTest2(com.oculusvr.api.OvrLibrary.ovrHmd)} and {@link #ovrHmd_GetMeasuredLatencyTest2(com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  double ovrHmd_GetMeasuredLatencyTest2(Pointer hmd);
  /**
   * pixel-read back method (-1 for invalid or N/A)<br>
   * Original signature : <code>double ovrHmd_GetMeasuredLatencyTest2(ovrHmd)</code><br>
   * <i>native declaration : OVR_CAPI.h:666</i>
   */
  double ovrHmd_GetMeasuredLatencyTest2(OvrLibrary.ovrHmd hmd);
  /**
   * Returns defaultValue if property doesn't exist.<br>
   * Original signature : <code>float ovrHmd_GetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:702</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetFloat(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String, float)} and {@link #ovrHmd_GetFloat(com.sun.jna.Pointer, com.sun.jna.Pointer, float)} instead
   */
  @Deprecated 
  float ovrHmd_GetFloat(Pointer hmd, Pointer propertyName, float defaultVal);
  /**
   * Returns defaultValue if property doesn't exist.<br>
   * Original signature : <code>float ovrHmd_GetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:702</i>
   */
  float ovrHmd_GetFloat(OvrLibrary.ovrHmd hmd, String propertyName, float defaultVal);
  /**
   * Modify float property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:705</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_SetFloat(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String, float)} and {@link #ovrHmd_SetFloat(com.sun.jna.Pointer, com.sun.jna.Pointer, float)} instead
   */
  @Deprecated 
  byte ovrHmd_SetFloat(Pointer hmd, Pointer propertyName, float value);
  /**
   * Modify float property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloat(ovrHmd, const char*, float)</code><br>
   * <i>native declaration : OVR_CAPI.h:705</i>
   */
  byte ovrHmd_SetFloat(OvrLibrary.ovrHmd hmd, String propertyName, float value);
  /**
   * Maximum of arraySize elements will be written.<br>
   * Original signature : <code>int ovrHmd_GetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:710</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetFloatArray(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String, java.nio.FloatBuffer, int)} and {@link #ovrHmd_GetFloatArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.FloatByReference, int)} instead
   */
  @Deprecated 
  int ovrHmd_GetFloatArray(Pointer hmd, Pointer propertyName, FloatByReference values, int arraySize);
  /**
   * Maximum of arraySize elements will be written.<br>
   * Original signature : <code>int ovrHmd_GetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:710</i>
   */
  int ovrHmd_GetFloatArray(OvrLibrary.ovrHmd hmd, String propertyName, FloatBuffer values, int arraySize);
  /**
   * Modify float[] property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:714</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_SetFloatArray(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String, java.nio.FloatBuffer, int)} and {@link #ovrHmd_SetFloatArray(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.FloatByReference, int)} instead
   */
  @Deprecated 
  byte ovrHmd_SetFloatArray(Pointer hmd, Pointer propertyName, FloatByReference values, int arraySize);
  /**
   * Modify float[] property; false if property doesn't exist or is readonly.<br>
   * Original signature : <code>ovrBool ovrHmd_SetFloatArray(ovrHmd, const char*, float[], unsigned int)</code><br>
   * <i>native declaration : OVR_CAPI.h:714</i>
   */
  byte ovrHmd_SetFloatArray(OvrLibrary.ovrHmd hmd, String propertyName, FloatBuffer values, int arraySize);
  /**
   * String memory is guaranteed to exist until next call to GetString or GetStringArray, or HMD is destroyed.<br>
   * Original signature : <code>char* ovrHmd_GetString(ovrHmd, const char*, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:720</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetString(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String, java.lang.String)} and {@link #ovrHmd_GetString(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  String ovrHmd_GetString(Pointer hmd, Pointer propertyName, Pointer defaultVal);
  /**
   * String memory is guaranteed to exist until next call to GetString or GetStringArray, or HMD is destroyed.<br>
   * Original signature : <code>char* ovrHmd_GetString(ovrHmd, const char*, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:720</i>
   */
  String ovrHmd_GetString(OvrLibrary.ovrHmd hmd, String propertyName, String defaultVal);
  /**
   * Can be used to check existence of a property.<br>
   * Original signature : <code>int ovrHmd_GetArraySize(ovrHmd, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:725</i><br>
   * @deprecated use the safer methods {@link #ovrHmd_GetArraySize(com.oculusvr.api.OvrLibrary.ovrHmd, java.lang.String)} and {@link #ovrHmd_GetArraySize(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
   */
  @Deprecated 
  int ovrHmd_GetArraySize(Pointer hmd, Pointer propertyName);
  /**
   * Can be used to check existence of a property.<br>
   * Original signature : <code>int ovrHmd_GetArraySize(ovrHmd, const char*)</code><br>
   * <i>native declaration : OVR_CAPI.h:725</i>
   */
  int ovrHmd_GetArraySize(OvrLibrary.ovrHmd hmd, String propertyName);
  public static class ovrHmd extends PointerType {
    public ovrHmd(Pointer address) {
      super(address);
    }
    public ovrHmd() {
      super();
    }
  };
}
